@using RoomBooking.Models.Booking;
@model List<RoomBooking.Models.Booking.GetAllBookingViewModel>
@using System.Security.Claims;
@{
    ViewData["Title"] = "Create Booking";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/repeater.js/1.2.1/repeater.min.css">

<style>
    .scheduler_default_main_demo {
        display: none !important;
    }

    #dp > div:nth-child(1) > div > div:nth-child(1) > div > div:nth-child(2) {
        display: none !important;
    }

    .calendar_default_event,
    .calendar_default_event_inner {
        border-radius: 15px;
        color: white;
    }

    .wrap {
        display: flex;
    }

    .left {
        margin-right: 10px;
    }

    .right {
        flex-grow: 1;
    }
</style>

<div class ="container">
    
    @{
        string userClaim = string.Empty;
        var roleClaims = User.Claims.Where(c => c.Type == "role").Select(c => c.Value).ToList();

        if (roleClaims.Count > 1)
        {
            userClaim = "admin";
        }
        else
        {
            userClaim = "user";
        }
    }


    @{

        <div class="notFoundMessage">
            <h2 class="alert-danger">Room Not Found</h2>
            <h3 class="alert-default-warning">Create a Room For Further Operation</h3>
        </div>
        
    }
    
    @if(TempData["success"] != null)
    {
        <div id="successMessage" class="alert alert-success alert-dismissible fade show text-center" role="alert" onclick="hideMessage()">
            <i class="icon fas fa-check"></i>
            @TempData["success"]
            
        </div>
    }

    @if(TempData["message"] != null)
    {
        <div id="successMessage" class="alert alert-warning alert-dismissible fade show text-center" role="alert" onclick="hideMessage()">
            <i class="icon fas fa-times"></i>
            @TempData["message"]
           
        </div>
    }

    <div class="wrap">
        <div class="left">
            <div id="nav"></div>
        </div>
        <div class="right">
            <div id="dp"></div>
        </div>
    </div>
</div>

@section Scripts{
    <partial name="_ValidationScriptsPartial" />
    <script src="~/daypilot/daypilot-all.min.js" asp-append-version="true"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.repeater/1.2.1/jquery.repeater.min.js" asp-append-version="true"></script>
    <script>
        $(document).ready(function () {
            $('#successMessage').on('click', function () {
                $(this).hide();
            });
        });
    </script>

    <script>
        
        function validateTextRequired(args) {
            var value = args.value || "";
            if (value.trim().length === 0) {
                args.valid = false;
                args.message = "Text required";
            } 
        }

        function validateEmailRequired(args) {

            var value = args.value || "";
            const array = value.trim().split(",");
            console.log("array ", array);
            var guests = "";
            var isValid = true;
            if (value.trim().length === 0) {
                args.valid = false;
                args.message = "Valid Email address required";
            }
            else if (array.length > 0) {
             
                for(var i = 0; i < array.length; i++)
                {
                    if(/^[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(array[i].trim()) == true){
                        guests += array[i].trim() + ",";
                    }
                    else{
                        isValid = false;
                        break;
                    }
                }
                
            }

            if(isValid == false){
                args.valid = false;
                args.message = "Invalid email format found Try Ex:[ab@gamil.com, ss@gmail.com]";
            }
        }

        function validateSingleEmailRequired(args) {

            var value = args.value || "";
            
            if (value.trim().length === 0) {
                args.valid = false;
                args.message = "Email address required";
            }
            else if (value.length > 0) {
             
               if(/^[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(value.trim()) == true)
               {
                   args.valid = true;
                  
               }  
               else{
                   args.valid = false;
                   args.message = "Enter valid format ! Mail format : zy@gmail.com";
               }
            }
        }

        const colors = [
            { id: "#1066a8", name: "Blue" },
            { id: "#6aa84f", name: "Green" },
            { id: "#f1c232", name: "Yellow" },
            { id: "#cc0000", name: "Red" },
        ];


        const calendar = new DayPilot.Calendar("dp", {
            viewType: "Resources",
            durationBarVisible: true,
            cellDuration: 15,
            onTimeRangeSelected: async (args) => {

                const form = [
                    {
                        name: "Event Name", id: "Name", onValidate: validateTextRequired, type: "text"
                    },
                    {
                        name: "Start Date & Time", id: "Start", type: "dateFormat", disabled: true
                    },
                    {
                        name: "End Date & Time", id: "End", type: "dateFormat", disabled: true
                    },
                    {
                        name: "Event Host", id: "Host", onValidate: validateSingleEmailRequired, type: "text",
                    },
                    {
                        name: "Guests Email " , id: "Guests", onValidate: validateEmailRequired, type: "text"
                    },
                ];

                const formTwo = [
                    {
                        name: "Event Name", id: "Name", onValidate: validateTextRequired, type: "text"
                    },
                    {
                        name: "Start Date & Time", id: "Start", type: "dateFormat", disabled: true
                    },
                    {
                        name: "End Date & Time", id: "End", type: "dateFormat", disabled: true
                    },
                    {
                        name: "Guests Email ", id: "Guests", onValidate: validateEmailRequired, type: "text"
                    },
                ];
                

                const data = {
                    Name: "Enter event name",
                    Color: "#f1c232",
                    Start: args.start,
                    End: args.end,
                    RoomId: args.resource,
                    Host: "enter host email",
                    CreatedAtUTC: new DayPilot.Date(),
                    CreatedBy: "admin@gmail.com",
                    State: "pending",
                    Guests: "Enter email in a comma seperated way [Ex: ab@gmail.com, bd@yahoo.com, dc@gmail.c]"

                };

                var requiredForm;

                if ("@userClaim" == "user") {
                    requiredForm = formTwo;
                }
                else {
                    requiredForm = form;
                }

                const modal = await DayPilot.Modal.form(requiredForm, data);
                calendar.clearSelection();

                if (modal.canceled) {
                    return;
                }

                const params = modal.result;
                const { data: event } = await DayPilot.Http.post("/Booking/Create", params);
                if (event != null) {
                    calendar.events.add(event);
                }
                window.location.href = "/booking/create";
              
            },
            onEventMove: async (args) => {
                const params = {
                    id: args.e.id(),
                    start: args.newStart,
                    end: args.newEnd,
                    roomId: args.newResource
                };
                await DayPilot.Http.put(`/Booking/Edit/${args.e.id()}`, params);
                window.location.href = "/Booking/Create";
                calendar.update();
                calendar.events.load(`/Booking/GetAllEvent/${args.newStart} ${args.newEnd}`);
            },
            onEventResize: async (args) => {
                const params = {
                    id: args.e.id(),
                    start: args.newStart,
                    end: args.newEnd,
                    roomId: args.e.data.resource
                };
                await DayPilot.Http.put(`/Booking/Edit/${args.e.id()}`, params);
                window.location.href = "/Booking/Create";
                calendar.update();
                calendar.events.load(`/Booking/GetAllEvent/${args.newStart} ${args.newEnd}`);
            },
            onBeforeEventRender: (args) => {
                args.data.backColor = args.data.color + "99";
                args.data.borderColor = args.data.color;
                args.data.areas = [
                    {
                        top: 6,
                        right: 6,
                        width: 20,
                        height: 20,
                        backColor: args.data.color,
                        symbol: "icons/daypilot.svg#minichevron-down-2",
                        visibility: "Visible",
                        action: "ContextMenu",
                        style: "border-radius: 15px; cursor:pointer;"
                    }
                ];
            }
        });
        calendar.init();

        const datepicker = new DayPilot.Navigator("nav", {
            showMonths: 1,
            skipMonths: 1,
            selectMode: "Day",
            onTimeRangeSelected: args => {
                calendar.startDate = args.day;
                app.loadEvents(args.day);
                calendar.update();
                calendar.events.load(`/Booking/GetAllEvent/${args.day} ${args.day}`);   

            }
        });
        datepicker.init();

        const app = {
            async loadResources() {

                const { data: rooms } = await DayPilot.Http.get(`/Booking/GetAllRoom`);

                console.log("Rooms :", rooms);

                if (rooms.length === 0) 
                {

                    $(".notFoundMessage").show();
                } 
                else
                {
                    $(".notFoundMessage").hide();
                }

                const columns = rooms.map(room => ({ id: room.id, name: room.name }));
                console.log("Columns : ", columns);
                calendar.columns = columns;
                calendar.update();
            },
            async loadEvents(date) {
                const params = {
                    start: date.toString(),
                    end: new Date(date.getTime() + 86400000).toString()
                };

                const { data } = await DayPilot.Http.get(`/Booking/GetAllEvent/${params.start} ${params.end}`);
                console.log("Data to load events :", data);
            
                calendar.events.list = data;
                calendar.update();
            },
            async updateColor(e, color) {
                const params = { color: color };
                await DayPilot.Http.put(`/api/events/${e.id()}/color`, params);
                e.data.color = color;
                calendar.events.update(e);
            },
            init() {
                this.loadResources();
                this.loadEvents(new DayPilot.Date());
            }
        };
        app.init();
    </script>

    <script>
        $(document).ready(function () {
           
            
        });
    </script>
}